apiVersion: batch/v1
kind: CronJob
metadata:
  name: app-books-backup
  namespace: mi-sistema
spec:
  schedule: "*/5 * * * *" # Ejecutar cada 5 minutos (para pruebas)
  successfulJobsHistoryLimit: 3 # Conserva los últimos 3 jobs exitosos
  failedJobsHistoryLimit: 1    # Conserva el último job fallido
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: backup-runner
            image: ubuntu:22.04
            command: ["/bin/bash", "-c"]
            args:
            - |
              set -e;
              # Rutas DENTRO DEL CONTENEDOR, correspondientes a los volumeMounts
              SOURCE_DATA_DIR_IN_CONTAINER="/mnt/host-pv";
              BACKUP_DEST_DIR_IN_CONTAINER="/mnt/host-backup-dest";

              BACKUP_FILENAME="app-books-backup-$(date +%Y%m%d-%H%M%S).tar.gz";
              
              echo "Iniciando backup de ${SOURCE_DATA_DIR_IN_CONTAINER} a ${BACKUP_DEST_DIR_IN_CONTAINER}/${BACKUP_FILENAME}";
              
              # Asegúrate de que el directorio de origen exista y tenga contenido
              if [ ! -d "${SOURCE_DATA_DIR_IN_CONTAINER}" ] || [ -z "$(ls -A ${SOURCE_DATA_DIR_IN_CONTAINER})" ]; then
                echo "Error: El directorio de origen ${SOURCE_DATA_DIR_IN_CONTAINER} no existe o está vacío."
                # Puedes decidir si salir con error o continuar para crear un backup vacío (no recomendado)
                # exit 1; # Descomenta para salir si el origen está vacío
              fi

              # Asegúrate de que el directorio de destino exista
              mkdir -p "${BACKUP_DEST_DIR_IN_CONTAINER}";

              tar -czvf "${BACKUP_DEST_DIR_IN_CONTAINER}/${BACKUP_FILENAME}" -C "${SOURCE_DATA_DIR_IN_CONTAINER}" . ;
              
              echo "Backup completado: ${BACKUP_DEST_DIR_IN_CONTAINER}/${BACKUP_FILENAME}";
              
              echo "Limpiando backups antiguos, conservando solo el último...";
              cd "${BACKUP_DEST_DIR_IN_CONTAINER}"; # cd al directorio de backups DENTRO DEL CONTENEDOR
              
              NUM_BACKUPS=$(ls -1 app-books-backup-*.tar.gz 2>/dev/null | wc -l);
              
              if [ "$NUM_BACKUPS" -gt 1 ]; then
                ls -1 app-books-backup-*.tar.gz | head -n -1 | while read OLD_BACKUP; do
                  echo "Eliminando backup antiguo: $OLD_BACKUP";
                  rm "$OLD_BACKUP";
                done
              else
                echo "No hay suficientes backups antiguos para eliminar (se necesita más de 1).";
              fi
              
              echo "Backups actuales en ${BACKUP_DEST_DIR_IN_CONTAINER}:";
              ls -lh;

            volumeMounts:
            - name: host-pv-storage # Este nombre debe coincidir con el 'volumes' de abajo
              mountPath: /mnt/host-pv # Ruta DENTRO del contenedor para los datos del PV
            - name: host-backup-destination # Este nombre debe coincidir con el 'volumes' de abajo
              mountPath: /mnt/host-backup-dest # Ruta DENTRO del contenedor para el destino del backup
          volumes:
          - name: host-pv-storage
            hostPath:
              path:          /var/snap/microk8s/common/default-storage/mi-sistema-app-books-data-pvc-pvc-4b3741e0-99b6-407f-af65-c22c1a1ce954 # Ruta REAL en el HOST
              type: Directory
          - name: host-backup-destination
            hostPath:
              path: "/home/alumno114317/ClustOps/backup" # Ruta REAL en el HOST
              type: DirectoryOrCreate